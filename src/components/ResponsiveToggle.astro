<button class="responsive-toggle" aria-expanded="false" aria-label="Open menu navigation">
  <span>Menu</span>
  <svg width="26" height="21" aria-hidden="true" fill="var(--link-color)" xmlns="http://www.w3.org/2000/svg"
    ><path
      d="M2 1.667h24m-24 8h24m-24 8h24"
      stroke="var(--foreground-color)"
      stroke-width="2.667"
      stroke-linecap="round"
      stroke-linejoin="round"></path></svg
  >
</button>

<script>
  document.addEventListener('astro:page-load', () => {
    // variables
    const responsiveToggle = document.querySelector('.responsive-toggle')

    // functions
    const openMenu = (toggle) => {
      const text = toggle.querySelector('span')
      const icon = toggle.querySelector('svg')
      text.textContent = 'Close'
      toggle.setAttribute('aria-expanded', true)
      toggle.setAttribute('aria-label', 'Close menu navigation')
      icon.innerHTML = `<path d="M10 10 2 2m8 8 8 8m-8-8 8-8m-8 8-8 8" stroke="var(--foreground-color)" stroke-width="2.667" stroke-linecap="round" stroke-linejoin="round"/>`
    }

    const closeMenu = (toggle) => {
      const text = toggle.querySelector('span')
      const icon = toggle.querySelector('svg')
      text.textContent = 'Menu'
      toggle.setAttribute('aria-expanded', false)
      toggle.setAttribute('aria-label', 'Open menu navigation')
      icon.innerHTML = `<path d="M2 1.667h24m-24 8h24m-24 8h24" stroke="var(--foreground-color)" stroke-width="2.667" stroke-linecap="round" stroke-linejoin="round"/>`
    }

    // execution
    responsiveToggle.addEventListener('click', (_) => {
      const mobileNavigation = document.querySelector('.mobile-menu')

      mobileNavigation.classList.toggle('show')
      mobileNavigation.classList.contains('show') ? openMenu(responsiveToggle) : closeMenu(responsiveToggle)
    })
  })
</script>

<style lang="scss">
  .responsive-toggle {
    display: none;
    margin-top: 6px;
    border: none;
    padding: 0;

    svg {
      margin-block-start: 4px;
      width: 30px;

      path {
        transition: fill 0.2s ease-in-out;
      }
    }

    &:where(:hover, :focus-visible) {
      span {
        text-decoration: underline;
        text-decoration-style: wavy;
        text-decoration-thickness: 1px;
        text-underline-offset: 7px;
      }
    }
  }
</style>
