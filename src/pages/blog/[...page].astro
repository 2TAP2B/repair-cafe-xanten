---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import { Card, Pagination } from 'accessible-astro-components'
import type { PaginateFunction, Page } from 'astro'
import { getCollection } from 'astro:content'

// Import images directly for optimization
import postImage1 from '@assets/images/posts/post-image-1.png'
import postImage2 from '@assets/images/posts/post-image-2.png'
import postImage3 from '@assets/images/posts/post-image-3.png'
import postImage4 from '@assets/images/posts/post-image-4.png'
import postImage5 from '@assets/images/posts/post-image-5.png'
import postImage6 from '../../assets/images/posts/post-image-6.png'

interface BlogPost {
  id: string
  slug: string
  data: {
    title: string
    author: string
    description: string
    publishDate: Date
  }
  render: any
  featuredImage: any
  shortUrl: string
}

export async function getStaticPaths({ paginate }: { paginate: PaginateFunction }) {
  const blogPosts = await getCollection('blog')

  const postImages = [postImage1, postImage2, postImage3, postImage4, postImage5, postImage6]

  const postsWithImages = blogPosts.map((post, index) => {
    // Use custom featured image if available, otherwise use default images
    let featuredImage
    if (post.data.featuredImage) {
      // For string paths, keep as string for the img src
      featuredImage = post.data.featuredImage
    } else {
      // Use imported image objects for default images
      featuredImage = postImages[index % postImages.length]
    }
    
    return {
      ...post,
      featuredImage: featuredImage,
      shortUrl: post.id,
    }
  }).sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime())

  return paginate(postsWithImages, { pageSize: 6 })
}

interface Props {
  page: Page<BlogPost>
}

const { page } = Astro.props as Props
---

<DefaultLayout
  title="Blog"
  description="An example of a blog with dynamic content fetched from JSONPlaceholder using the title, body and userId."
>

  <section class="my-12">
    <div class="container">
      <p class="text-sm"><em>Post {page.start + 1} through {page.end + 1} of {page.total} total posts</em></p>
      <ul class="my-3 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {
          page.data.map((post) => (
            <li>
              <Card
                imageComponent={post.featuredImage}
                url={'/blog/' + post.shortUrl}
                title={post.data.title}
                footer={'Von: ' + post.data.author}
              >
                {post.data.description}
              </Card>
            </li>
          ))
        }
      </ul>
      <div class="mt-12 grid place-content-center">
        <Pagination
          firstPage={page.url.prev ? '/blog' : null}
          previousPage={page.url.prev ? page.url.prev : null}
          nextPage={page.url.next ? page.url.next : null}
          lastPage={page.url.next ? `/blog/${Math.ceil(page.total / page.size)}` : null}
          currentPage={`${page.currentPage}`}
          totalPages={`${Math.ceil(page.total / page.size)}`}
          ariaLabel="Blog pagination"
        />
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss" is:global>
  @use '../../assets/scss/base/mixins' as *;

  .card {
    h3 {
      margin-block-end: var(--space-xs);
      line-height: 0.75;
    }

    a {
      @include text-decoration(transparent, var(--foreground-color), 4px, 2px);
    }
  }
</style>
